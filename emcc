#!/usr/bin/env python

'''
emcc - compiler helper script
=============================

emcc is a drop-in replacement for a compiler like gcc or clang.

Tell your build system to use this instead of the compiler, and similarly
use emar, emld and emranlib instead of the same command without 'em'.

Example uses:

 * For configure, instead of ./configure, cmake, etc., run emconfigure.py
   with that command as an argument, for example

    emconfigure.py ./configure [options]
  
   emconfigure.py is a tiny script that just sets some environment vars
   as a convenience. The command just shown is equivalent to

    EMMAKEN_JUST_CONFIGURE=1 RANLIB=PATH/emranlib AR=PATH/emar CXX=PATH/em++ CC=PATH/emcc ./configure [options]

   where PATH is the path to this file.

   EMMAKEN_JUST_CONFIGURE tells emcc that it is being run in ./configure,
   so it should relay everything to gcc/g++. You should not define that when
   running make, of course.

 * With CMake, the same command will work (with cmake instead of ./configure). You may also be
   able to do the following in your CMakeLists.txt:

    SET(CMAKE_C_COMPILER "PATH/emcc")
    SET(CMAKE_CXX_COMPILER "PATH/em++")
    SET(CMAKE_LINKER "PATH/emld")
    SET(CMAKE_CXX_LINKER "PATH/emld")
    SET(CMAKE_C_LINK_EXECUTABLE "PATH/emld")
    SET(CMAKE_CXX_LINK_EXECUTABLE "PATH/emld")
    SET(CMAKE_AR "PATH/emar")
    SET(CMAKE_RANLIB "PATH/emranlib")

 * For SCons the shared.py can be imported like so:
    __file__ = str(Dir('#/project_path_to_emscripten/dummy/dummy'))
    __rootpath__ = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    def path_from_root(*pathelems):
      return os.path.join(__rootpath__, *pathelems)
    sys.path += [path_from_root('')]
    from tools.shared import *
    
   For using the Emscripten compilers/linkers/etc. you can do:
    env = Environment()
    ...
    env.Append(CCFLAGS = COMPILER_OPTS)
    env.Replace(LINK = LLVM_LD)
    env.Replace(LD   = LLVM_LD)
   TODO: Document all relevant setup changes

After setting that up, run your build system normally.

Note the appearance of em++ instead of emcc
for the C++ compiler. This is needed for cases where we get
a C++ file with a C extension, in which case CMake can be told
to run g++ on it despite the .c extension, see

  https://github.com/kripken/emscripten/issues/6

(If a similar situation occurs with ./configure, you can do the same there too.)

emcc can be influenced by a few environment variables:

  EMMAKEN_NO_SDK - Will tell emcc *not* to use the emscripten headers. Instead
                   your system headers will be used.

  EMMAKEN_COMPILER - The compiler to be used, if you don't want the default clang.
'''

import os, sys, shutil, tempfile
from subprocess import Popen, PIPE, STDOUT
from tools import shared

# Mapping of emcc opt levels to llvm opt levels. We use llvm opt level 3 in emcc opt
# levels 2 and 3 (emcc 3 is unsafe opts, so unsuitable for the only level to get
# llvm opt level 3, and speed-wise emcc level 2 is already the slowest/most optimizing
# level)
LLVM_OPT_LEVEL = {
  0: 0,
  1: 1,
  2: 3,
  3: 3,
}

DEBUG = os.environ.get('EMCC_DEBUG')
TEMP_DIR = os.environ.get('EMCC_TEMP_DIR')
LEAVE_INPUTS_RAW = os.environ.get('EMCC_LEAVE_INPUTS_RAW') # Do not compile .ll files into .bc, just compile them with emscripten directly
                                                           # Not recommended, this is mainly for the test runner, or if you have some other
                                                           # specific need.
                                                           # One major limitation with this mode is that dlmalloc and libc++ cannot be
                                                           # added in. Also, LLVM optimizations will not be done, nor dead code elimination
AUTODEBUG = os.environ.get('EMCC_AUTODEBUG') # If set to 1, we will run the autodebugger (the automatic debugging tool, see tools/autodebugger).
                                             # Note that this will disable inclusion of libraries. This is useful because including
                                             # dlmalloc makes it hard to compare native and js builds

if DEBUG: print >> sys.stderr, 'emcc: ', ' '.join(sys.argv)
if DEBUG and LEAVE_INPUTS_RAW: print >> sys.stderr, 'emcc: leaving inputs raw'

stdout = PIPE if not DEBUG else None # suppress output of child processes
stderr = PIPE if not DEBUG else None # unless we are in DEBUG mode

shared.check_sanity()

# Handle some global flags

if len(sys.argv) == 1:
  print 'emcc: no input files'
  exit(0)

if sys.argv[1] == '--version':
  print '''emcc (Emscripten GCC-like replacement) 2.0
Copyright (C) 2011 the Emscripten authors.
This is free and open source software under the MIT license.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  '''
  exit(0)
elif sys.argv[1] == '--help':
  this = os.path.basename('em++' if os.environ.get('EMMAKEN_CXX') else 'emcc')

  print '''%s [options] file...

Most normal gcc/g++ options will work, for example:
  --help                   Display this information
  --version                Display compiler version information

Options that are modified or new in %s include:
  -O0                      No optimizations (default)
  -O1                      Simple optimizations, including LLVM -O1
                           optimizations, and no runtime assertions
                           or C++ exception catching (to re-enable
                           C++ exception catching, use
                           -s DISABLE_EXCEPTION_CATCHING=0 ).
                           Note: Optimizations are only done when
                           compiling to JavaScript, not to intermediate
                           bitcode.
  -O2                      As -O1, plus the relooper (loop recreation),
                           plus closure compiler advanced opts, plus
                           LLVM -O2 optimizations
                           Warning: Compiling with this takes a long time!
  -O3                      As -O2, plus dangerous optimizations that may
                           break the generated code! If that happens, try
                           -O2 and then adding dangerous optimizations one
                           by one.
  -s OPTION=VALUE          JavaScript code generation option passed
                           into the emscripten compiler
  --typed-arrays <mode>    0: No typed arrays
                           1: Parallel typed arrays
                           2: Shared (C-like) typed arrays (default)
  --llvm-opts <level>      0: No LLVM optimizations (default in -O0)
                           1: -O1 LLVM optimizations (default in -O1)
                           2: -O2 LLVM optimizations
                           3: -O3 LLVM optimizations (default in -O2+)
  --closure <on>           0: No closure compiler (default in -O0, -O1)
                           1: Run closure compiler (default in -O2, -O3)
  --js-transform <cmd>     <cmd> will be called on the generated code
                           before it is optimized. This lets you modify
                           the JavaScript, for example adding some code
                           or removing some code, in a way that those
                           modifications will be optimized together with
                           the generated code properly. <cmd> will be
                           called with the filename of the generated
                           code as a parameter; to modify the code, you
                           can read the original data and then append to
                           it or overwrite it with the modified data.
                           <cmd> is interpreted as a space-separated
                           list of arguments, for example, <cmd> of
                           "python processor.py" will cause a python
                           script to be run.
  --compress <on>          0: Do not compress the generated JavaScript's
                              whitespace (default if closure compiler
                              will not be run)
                           1: Compress the generated JavaScript's
                              whitespace (default if closure compiler
                              will be run). Note that this by itself
                              will not minify the code (closure does
                              that)
  --shell-file <path>      The path name to a skeleton HTML file used
                           when generating HTML output. The shell file
                           used needs to have this token inside it:
                           {{{ SCRIPT_CODE }}}
                           Note that this argument is ignored if a
                           target other than HTML is specified using
                           the -o option.

The target file, if specified (-o <target>), defines what will
be generated:

  <name>.js                JavaScript (default)
  <name>.html              HTML with embedded JavaScript
  <name>.bc                LLVM bitcode
  <name>.o                 LLVM bitcode

The -c option (which tells gcc not to run the linker) will
cause LLVM bitcode to be generated, as %s only generates
JavaScript in the final linking stage of building.

The input file(s) can be either source code files that
Clang can handle (C or C++), LLVM bitcode in binary form,
or LLVM assembly files in human-readable form.

''' % (this, this, this)
  exit(0)

# If this is a configure-type thing, do not compile to JavaScript, instead use clang
# to compile to a native binary (using our headers, so things make sense later)
CONFIGURE_CONFIG = os.environ.get('EMMAKEN_JUST_CONFIGURE')
CMAKE_CONFIG = 'CMakeFiles/cmTryCompileExec.dir' in ' '.join(sys.argv)# or 'CMakeCCompilerId' in ' '.join(sys.argv)
if CONFIGURE_CONFIG or CMAKE_CONFIG:
  compiler = shared.CLANG
  if not ('CXXCompiler' in ' '.join(sys.argv) or os.environ.get('EMMAKEN_CXX')):
    compiler = shared.to_cc(compiler)
  cmd = [compiler] + shared.EMSDK_OPTS + sys.argv[1:]
  if DEBUG: print >> sys.stderr, 'emcc, just configuring: ', compiler, cmd
  exit(os.execvp(compiler, cmd))

if os.environ.get('EMMAKEN_COMPILER'):
  CXX = os.environ['EMMAKEN_COMPILER']
else:
  CXX = shared.CLANG

CC = shared.to_cc(CXX)

# If we got here from a redirection through emmakenxx.py, then force a C++ compiler here
if os.environ.get('EMMAKEN_CXX'):
  CC = CXX

CC_ADDITIONAL_ARGS = shared.COMPILER_OPTS # + ['-g']?

EMMAKEN_CFLAGS = os.environ.get('EMMAKEN_CFLAGS')
if EMMAKEN_CFLAGS: CC_ADDITIONAL_ARGS += EMMAKEN_CFLAGS.split(' ')

# ---------------- Utilities ---------------

SOURCE_SUFFIXES = ('.c', '.cpp', '.cxx', '.cc')
BITCODE_SUFFIXES = ('.bc', '.o')
SHAREDLIB_SUFFIXES = ('.dylib', '.so', '.dll')
ASSEMBLY_SUFFIXES = ('.ll',)

def unsuffixed(name):
  return '.'.join(name.split('.')[:-1])

def unsuffixed_basename(name):
  return os.path.basename(unsuffixed(name))

# ---------------- End configs -------------

if len(sys.argv) == 1 or sys.argv[1] in ['x', 't']:
  # noop ar
  if DEBUG: print >> sys.stderr, 'emcc, just ar'
  sys.exit(0)

use_cxx = True
header = False # pre-compiled headers. We fake that by just copying the file

for i in range(1, len(sys.argv)):
  arg = sys.argv[i]
  if not arg.startswith('-'):
    if arg.endswith('.c'):
      use_cxx = False
    if arg.endswith('.h') and sys.argv[i-1] != '-include':
      header = True

# Check if a target is specified
target = None
for i in range(len(sys.argv)-1):
  if sys.argv[i].startswith('-o='):
    raise Exception('Invalid syntax: do not use -o=X, use -o X')

  if sys.argv[i] == '-o':
    target = sys.argv[i+1]
    sys.argv = sys.argv[:i] + sys.argv[i+2:]
    break

if header: # header or such
  if DEBUG: print >> sys.stderr, 'Just copy.'
  shutil.copy(sys.argv[-1], sys.argv[-2])
  exit(0)

if TEMP_DIR:
  temp_dir = TEMP_DIR
  if os.path.exists(temp_dir):
    shutil.rmtree(temp_dir) # clear it
  os.makedirs(temp_dir)
else:
  temp_dir = tempfile.mkdtemp()

def in_temp(name):
  return os.path.join(temp_dir, name)

try:
  call = CXX if use_cxx else CC

  ## Parse args

  newargs = sys.argv[1:]

  opt_level = 0
  llvm_opts = None
  closure = None
  js_transform = None
  compress_whitespace = None
  shell_path = shared.path_from_root('src', 'shell.html')

  def check_bad_eq(arg):
    assert '=' not in arg, 'Invalid parameter (do not use "=" with "--" options)'

  for i in range(len(newargs)):
    if newargs[i].startswith('-O'):
      try:
        opt_level = int(newargs[i][2])
        assert 0 <= opt_level <= 3
      except:
        raise Exception('Invalid optimization level: ' + newargs[i])
      newargs[i] = ''
    elif newargs[i].startswith('--llvm-opts'):
      check_bad_eq(newargs[i])
      llvm_opts = eval(newargs[i+1])
      newargs[i] = ''
      newargs[i+1] = ''
    elif newargs[i].startswith('--closure'):
      check_bad_eq(newargs[i])
      closure = int(newargs[i+1])
      newargs[i] = ''
      newargs[i+1] = ''
    elif newargs[i].startswith('--js-transform'):
      check_bad_eq(newargs[i])
      js_transform = newargs[i+1]
      newargs[i] = ''
      newargs[i+1] = ''
    elif newargs[i].startswith('--compress'):
      check_bad_eq(newargs[i])
      compress_whitespace = int(newargs[i+1])
      newargs[i] = ''
      newargs[i+1] = ''
    elif newargs[i] == '-MF': # clang cannot handle this, so we fake it
      f = open(newargs[i+1], 'w')
      f.write('\n')
      f.close()
      newargs[i] = ''
      newargs[i+1] = ''
    elif newargs[i].startswith('--shell-file'):
      check_bad_eq(newargs[i])
      shell_path = newargs[i+1]
      newargs[i] = ''
      newargs[i+1] = ''
  newargs = [ arg for arg in newargs if arg is not '' ]

  if llvm_opts is None: llvm_opts = LLVM_OPT_LEVEL[opt_level]
  if closure is None: closure = 1 if opt_level >= 2 else 0
  if compress_whitespace is None:
    compress_whitespace = closure # if closure is run, compress whitespace

  if closure:
    assert os.path.exists(shared.CLOSURE_COMPILER), 'emcc: fatal: Closure compiler (%s) does not exist' % shared.CLOSURE_COMPILER

  settings_changes = []
  for i in range(len(newargs)):
    if newargs[i] == '-s':
      assert '=' in newargs[i+1], 'Incorrect syntax for -s (use -s OPT=VAL): ' + newargs[i+1]
      settings_changes.append(newargs[i+1])
      newargs[i] = newargs[i+1] = ''
    elif newargs[i].startswith('--typed-arrays'):
      assert '=' not in newargs[i], 'Invalid typed arrays parameter (do not use "=")'
      settings_changes.append('USE_TYPED_ARRAYS=' + newargs[i+1])
      newargs[i] = ''
      newargs[i+1] = ''
  newargs = [ arg for arg in newargs if arg is not '' ]

  input_files = []
  has_source_inputs = False
  for i in range(len(newargs)): # find input files XXX this a simple heuristic. we should really analyze based on a full understanding of gcc params,
                                # right now we just assume that what is left contains no more |-x OPT| things
    arg = newargs[i]
    if arg.endswith(SOURCE_SUFFIXES + BITCODE_SUFFIXES + SHAREDLIB_SUFFIXES + ASSEMBLY_SUFFIXES) or shared.Building.is_ar(arg): # we already removed -o <target>, so all these should be inputs
      newargs[i] = ''
      if os.path.exists(arg):
        if arg.endswith(SOURCE_SUFFIXES):
          input_files.append(arg)
          has_source_inputs = True
        else:
          # this should be bitcode, make sure it is valid
          if arg.endswith(ASSEMBLY_SUFFIXES) or shared.Building.is_bitcode(arg):
            input_files.append(arg)
          else:
            print >> sys.stderr, 'emcc: %s: warning: Not valid LLVM bitcode' % arg
      else:
        print >> sys.stderr, 'emcc: %s: warning: No such file or directory' % arg
  newargs = [ arg for arg in newargs if arg is not '' ]

  assert len(input_files) > 0, 'emcc: no input files'

  newargs += CC_ADDITIONAL_ARGS

  specified_target = target
  target = specified_target if specified_target is not None else 'a.out.js' # specified_target is the user-specified one, target is what we will generate

  target_basename = unsuffixed_basename(target)

  # -c means do not link in gcc, and for us, the parallel is to not go all the way to JS, but stop at bitcode
  has_dash_c = '-c' in newargs
  if has_dash_c:
    assert has_source_inputs, 'Must have source code inputs to use -c'
    target = target_basename + '.o'

  if '.' in target:
    final_suffix = target.split('.')[-1]
  else:
    final_suffix = ''

  # Apply optimization level settings
  shared.Settings.apply_opt_level(opt_level, noisy=True)

  # Apply -s settings in newargs here (after optimization levels, so they can override them)
  for change in settings_changes:
    key, value = change.split('=')
    exec('shared.Settings.' + key + ' = ' + value)

  ## Compile source code to bitcode

  if DEBUG: print >> sys.stderr, 'emcc: compiling to bitcode'

  temp_files = []

  # First, generate LLVM bitcode. For each input file, we get base.o with bitcode
  for input_file in input_files:
    if input_file.endswith(SOURCE_SUFFIXES):
      if DEBUG: print >> sys.stderr, 'emcc: compiling source file: ', input_file
      output_file = in_temp(unsuffixed_basename(input_file) + '.o')
      temp_files.append(output_file)
      args = newargs + ['-emit-llvm', '-c', input_file, '-o', output_file]
      if DEBUG: print >> sys.stderr, "emcc running:", call, ' '.join(args)
      Popen([call] + args).communicate() # let compiler frontend print directly, so colors are saved (PIPE kills that)
      if not os.path.exists(output_file):
        print >> sys.stderr, 'emcc: compiler frontend failed to generate LLVM bitcode, halting'
        sys.exit(1)
    else: # bitcode
      if input_file.endswith(BITCODE_SUFFIXES):
        if DEBUG: print >> sys.stderr, 'emcc: copying bitcode file: ', input_file
        temp_file = in_temp(unsuffixed_basename(input_file) + '.o')
        shutil.copyfile(input_file, temp_file)
        temp_files.append(temp_file)
      elif input_file.endswith(SHAREDLIB_SUFFIXES) or shared.Building.is_ar(input_file):
        if DEBUG: print >> sys.stderr, 'emcc: copying library file: ', input_file
        temp_file = in_temp(os.path.basename(input_file))
        shutil.copyfile(input_file, temp_file)
        temp_files.append(temp_file)
      else: #.ll
        if not LEAVE_INPUTS_RAW:
          # Note that by assembling the .ll file, then disassembling it later, we will
          # remove annotations which is a good thing for compilation time
          if DEBUG: print >> sys.stderr, 'emcc: assembling assembly file: ', input_file
          temp_file = in_temp(unsuffixed_basename(input_file) + '.o')
          shared.Building.llvm_as(input_file, temp_file)
          temp_files.append(temp_file)

  # If we were just asked to generate bitcode, stop there
  if final_suffix not in ['js', 'html']:
    if llvm_opts > 0:
      print >> sys.stderr, 'emcc: warning: -Ox flags ignored, since not generating JavaScript'
    if not specified_target:
      for input_file in input_files:
        shutil.move(in_temp(unsuffixed_basename(input_file) + '.o'), unsuffixed_basename(input_file) + '.' + final_suffix)
    else:
      if len(input_files) == 1:
        shutil.move(in_temp(unsuffixed_basename(input_files[0]) + '.o'), specified_target)
      else:
        assert not has_dash_c, 'fatal error: cannot specify -o with -c with multiple files' + str(sys.argv)
        # We have a specified target (-o <target>), which is not JavaScript or HTML, and
        # we have multiple files: Link them TODO: llvm link-time opts?
        ld_args = temp_files + ['-b', specified_target]
                  #[arg.split('-Wl,')[1] for arg in filter(lambda arg: arg.startswith('-Wl,'), sys.argv)]
        if DEBUG: print >> sys.stderr, 'emcc: link: ' + str(ld_args)
        Popen([shared.LLVM_LD, '-disable-opt'] + ld_args).communicate()
    exit(0)

  ## Continue on to create JavaScript

  if DEBUG: print >> sys.stderr, 'emcc: will generate JavaScript'

  extra_files_to_link = []

  if not LEAVE_INPUTS_RAW and not AUTODEBUG:
    # Check if we need to include some libraries that we compile. (We implement libc ourselves in js, but
    # compile a malloc implementation and stdlibc++.)
    # Note that we assume a single symbol is enough to know if we have/do not have dlmalloc etc. If you
    # include just a few symbols but want the rest, this will not work.

    # dlmalloc
    def create_dlmalloc():
      if DEBUG: print >> sys.stderr, 'emcc: building dlmalloc for cache'
      Popen([shared.EMCC, shared.path_from_root('system', 'lib', 'dlmalloc.c'), '-g', '-o', in_temp('dlmalloc.o')], stdout=stdout, stderr=stderr).communicate()
      # we include the libc++ new stuff here, so that the common case of using just new/delete is quick to link
      Popen([shared.EMXX, shared.path_from_root('system', 'lib', 'libcxx', 'new.cpp'), '-g', '-o', in_temp('new.o')], stdout=stdout, stderr=stderr).communicate()
      shared.Building.link([in_temp('dlmalloc.o'), in_temp('new.o')], in_temp('dlmalloc_full.o'))
      return in_temp('dlmalloc_full.o')
    def fix_dlmalloc():
      # dlmalloc needs some sign correction. # If we are in mode 0, switch to 2. We will add our lines
      try:
        if shared.Settings.CORRECT_SIGNS == 0: raise Exception('we need to change to 2')
      except: # we fail if equal to 0 - so we need to switch to 2 - or if CORRECT_SIGNS is not even in Settings
        shared.Settings.CORRECT_SIGNS = 2
      if shared.Settings.CORRECT_SIGNS == 2:
        shared.Settings.CORRECT_SIGNS_LINES = [shared.path_from_root('src', 'dlmalloc.c') + ':' + str(i+4) for i in [4816, 4191, 4246, 4199, 4205, 4235, 4227]]
      # If we are in mode 1, we are correcting everything anyhow. If we are in mode 3, we will be corrected
      # so all is well anyhow too.
    # XXX We also need to add libc symbols that use malloc, for example strdup. It's very rare to use just them and not
    #     a normal malloc symbol (like free, after calling strdup), so we haven't hit this yet, but it is possible.
    dlmalloc_symbols = open(shared.path_from_root('system', 'lib', 'dlmalloc.symbols')).read().split('\n')

    # libcxx
    def create_libcxx():
      if DEBUG: print >> sys.stderr, 'emcc: building libcxx for cache'
      shared.Building.build_library('libcxx', shared.EMSCRIPTEN_TEMP_DIR, shared.EMSCRIPTEN_TEMP_DIR, ['libcxx.bc'], configure=None, copy_project=True, source_dir=shared.path_from_root('system', 'lib', 'libcxx'))
      return os.path.join(shared.EMSCRIPTEN_TEMP_DIR, 'libcxx', 'libcxx.bc')
    def fix_libcxx():
      assert shared.Settings.QUANTUM_SIZE == 4, 'We do not support libc++ with QUANTUM_SIZE == 1'
      # libcxx might need corrections, so turn them all on. TODO: check which are actually needed
      shared.Settings.CORRECT_SIGNS = shared.Settings.CORRECT_OVERFLOWS = shared.Settings.CORRECT_ROUNDINGS = 1
      print >> sys.stderr, 'emcc: warning: using libcxx turns on CORRECT_* options'
    libcxx_symbols = map(lambda line: line.strip().split(' ')[1], open(shared.path_from_root('system', 'lib', 'libcxx', 'symbols')).readlines())
    libcxx_symbols = filter(lambda symbol: symbol not in dlmalloc_symbols, libcxx_symbols)
    libcxx_symbols = set(libcxx_symbols)

    force = False # If we have libcxx, we must force inclusion of dlmalloc, since libcxx uses new internally. Note: this is kind of hacky

    for name, create, fix, library_symbols in [('libcxx',   create_libcxx,   fix_libcxx,   libcxx_symbols),
                                               ('dlmalloc', create_dlmalloc, fix_dlmalloc, dlmalloc_symbols)]:
      need = []
      has = []
      for input_file in input_files:
        symbols = shared.Building.llvm_nm(in_temp(unsuffixed_basename(input_file) + '.o'))
        for library_symbol in library_symbols:
          if library_symbol in symbols.undefs:
            need.append(library_symbol)
          if library_symbol in symbols.defs:
            has.append(library_symbol)
      if DEBUG: print >> sys.stderr, 'emcc: considering including %s: we need |%s| and have |%s|' % (name, str(need), str(has))
      if force or (need and not has):
        # We need to build and link the library in
        if DEBUG: print >> sys.stderr, 'emcc: including %s' % name
        extra_files_to_link.append(shared.Cache.get(name, create))
        force = True
        if fix:
          fix()

  # First, combine the bitcode files if there are several
  if len(input_files) + len(extra_files_to_link) > 1:
    linker_inputs = map(lambda input_file: in_temp(unsuffixed_basename(input_file) + '.o'), input_files) + extra_files_to_link
    if DEBUG: print >> sys.stderr, 'emcc: linking: ', linker_inputs
    shared.Building.link(linker_inputs,
                         in_temp(target_basename + '.bc'))
    final = in_temp(target_basename + '.bc')
  else:
    if not LEAVE_INPUTS_RAW:
      shutil.move(in_temp(unsuffixed_basename(input_files[0]) + '.o'), in_temp(target_basename + '.bc'))
      final = in_temp(target_basename + '.bc')
    else:
      final = input_files[0]

  if DEBUG:
    print >> sys.stderr, 'emcc: saving intermediate processing steps to %s' % shared.EMSCRIPTEN_TEMP_DIR

    intermediate_counter = 0
    def save_intermediate(name=None, suffix='js'):
      global intermediate_counter
      shutil.copyfile(final, os.path.join(shared.EMSCRIPTEN_TEMP_DIR, 'emcc-%d%s.%s' % (intermediate_counter, '' if name is None else '-' + name, suffix)))
      intermediate_counter += 1

    if not LEAVE_INPUTS_RAW: save_intermediate('basebc', 'bc')

  # Optimize, if asked to
  if llvm_opts > 0 and not LEAVE_INPUTS_RAW:
    if DEBUG: print >> sys.stderr, 'emcc: LLVM -O%d' % llvm_opts
    shared.Building.llvm_opt(in_temp(target_basename + '.bc'), llvm_opts)
    if DEBUG: save_intermediate('opt', 'bc')
    # Do LTO in a separate pass to work around LLVM bug XXX (see failure e.g. in cubescript)
    if shared.Building.can_use_unsafe_opts() and shared.Building.can_build_standalone():
      lto_opts = []
      if not shared.Building.can_inline(): lto_opts.append('-disable-inlining')
      lto_opts.append('-std-link-opts')
      if DEBUG: print >> sys.stderr, 'emcc: LLVM LTO:', lto_opts
      shared.Building.llvm_opt(in_temp(target_basename + '.bc'), lto_opts)
      if DEBUG: save_intermediate('lto', 'bc')
  else:
    # If possible, remove dead functions etc., this potentially saves a lot in the size of the generated code (and the time to compile it)
    if not LEAVE_INPUTS_RAW and shared.Building.can_build_standalone():
      if DEBUG: print >> sys.stderr, 'emcc: LLVM dead globals elimination'
      shared.Building.llvm_opt(in_temp(target_basename + '.bc'), ['-internalize', '-globaldce'])
      if DEBUG: save_intermediate('dce', 'bc')

  # Prepare .ll for Emscripten
  if not LEAVE_INPUTS_RAW:
    final = shared.Building.llvm_dis(final, final + '.ll')
  else:
    assert len(input_files) == 1
  if DEBUG: save_intermediate('ll', 'll')

  if AUTODEBUG:
    if DEBUG: print >> sys.stderr, 'emcc: autodebug'
    Popen(['python', shared.AUTODEBUGGER, final, final + '.ad.ll']).communicate()[0]
    final += '.ad.ll'
    if DEBUG: save_intermediate('autodebug', 'll')

  # Emscripten
  if DEBUG: print >> sys.stderr, 'emcc: LLVM => JS'
  final = shared.Building.emscripten(final, append_ext=False)
  if DEBUG: save_intermediate('original')

  # Apply a source code transformation, if requested
  if js_transform:
    shutil.copyfile(final, final + '.tr.js')
    final += '.tr.js'
    if DEBUG: print >> sys.stderr, 'emcc: applying transform: %s' % js_transform
    Popen(js_transform.split(' ') + [os.path.abspath(final)]).communicate()
    if DEBUG: save_intermediate('transformed')

  # It is useful to run several js optimizer passes together, to save on unneeded unparsing/reparsing
  js_optimizer_queue = []
  def flush_js_optimizer_queue():
    global final, js_optimizer_queue
    if len(js_optimizer_queue) > 0:
      if not DEBUG:
        final = shared.Building.js_optimizer(final, js_optimizer_queue)
      else:
        for name in js_optimizer_queue:
          print >> sys.stderr, 'emcc: applying js optimization pass:', name
          final = shared.Building.js_optimizer(final, [name])
          save_intermediate(name)
      js_optimizer_queue = []

  if opt_level >= 1:
    if DEBUG: print >> sys.stderr, 'emcc: running pre-closure post-opts'

    if DEBUG:
      # Clean up the syntax a bit
      final = shared.Building.js_optimizer(final, [])
      if DEBUG: save_intermediate('pretty')

    if shared.Settings.RELOOP:
      js_optimizer_queue += ['hoistMultiples', 'loopOptimizer']

    flush_js_optimizer_queue()

    # eliminator
    if DEBUG: print >> sys.stderr, 'emcc: running variable eliminator'
    final = shared.Building.eliminator(final)
    if DEBUG: save_intermediate('eliminator')

    # js optimizer pre-pass
    js_optimizer_queue += ['simplifyExpressionsPre', 'optimizeShiftsConservative']
    ###js_optimizer_queue += ['optimizeShiftsAggressive']
    ###final = shared.Building.eliminator(final) # aggressive shifts optimization introduces some new variables, remove ones that we can
    ###if DEBUG: save_intermediate('eliminator')

  if closure:
    flush_js_optimizer_queue()

    if DEBUG: print >> sys.stderr, 'emcc: running closure'
    final = shared.Building.closure_compiler(final)
    if DEBUG: save_intermediate('closure')

  if opt_level >= 1:
    # js optimizer post-pass
    if DEBUG: print >> sys.stderr, 'emcc: running post-closure post-opts'
    js_optimizer_queue += ['simplifyExpressionsPost']

  if compress_whitespace:
    js_optimizer_queue += ['compress']

  flush_js_optimizer_queue()

  # If we were asked to also generate HTML, do that
  if final_suffix == 'html':
    if DEBUG: print >> sys.stderr, 'emcc: generating HTML'
    shell = open(shell_path).read()
    html = open(target, 'w')
    html.write(shell.replace('{{{ SCRIPT_CODE }}}', open(final).read()))
    html.close()
  else:
    # copy final JS to output
    shutil.move(final, target)

finally:
  if not TEMP_DIR:
    try:
      shutil.rmtree(temp_dir)
    except:
      pass
  else:
    print >> sys.stderr, 'emcc saved files are in:', temp_dir

